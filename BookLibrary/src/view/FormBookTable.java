package view;


import view.MainMenu;
import model.Book;
import java.awt.Dimension;
import java.util.List;
import javax.swing.ButtonGroup;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Raul
 */
public class FormBookTable extends javax.swing.JInternalFrame {

    /**
     * Creates new form FormBookTable
     */

    public FormBookTable() {
        initComponents();
        
        this.setTitle("Pesquisa de livros");
        this.setResizable(false);
        this.setMaximizable(false);
        this.setIconifiable(false);
        this.setClosable(true);
        
        configureTable();
        
        ckbProgramBooks.setSelected(true);
        ckbUsersBooks.setSelected(true);
        
        for (User user: MainMenu.userList){
            fillTable(user.getBookLibrary());
        } 
        fillTable(MainMenu.bookLibrary);

        configureButtonGroup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabBooks = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtSearchBook = new javax.swing.JTextField();
        rdbTitle = new javax.swing.JRadioButton();
        rdbPublisher = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        rdbAuthor = new javax.swing.JRadioButton();
        rdbIsbn = new javax.swing.JRadioButton();
        ckbProgramBooks = new javax.swing.JCheckBox();
        ckbUsersBooks = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        tabBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabBooks);

        jButton1.setText("Saiba mais...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Pesquisar:");

        rdbTitle.setText("Titulo");
        rdbTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbTitleActionPerformed(evt);
            }
        });

        rdbPublisher.setText("Editora");
        rdbPublisher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbPublisherActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Pesquisar na Biblioteca Virtual");

        rdbAuthor.setText("Autor");
        rdbAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbAuthorActionPerformed(evt);
            }
        });

        rdbIsbn.setText("Isbn");
        rdbIsbn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbIsbnActionPerformed(evt);
            }
        });

        ckbProgramBooks.setText("Biblioteca central");

        ckbUsersBooks.setText("Livros dos usu√°rios");

        jButton2.setText("Voltar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Search.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BookSearch.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(6, 6, 6)
                                .addComponent(txtSearchBook, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4)
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(rdbTitle)
                                .addGap(6, 6, 6)
                                .addComponent(rdbPublisher)
                                .addGap(6, 6, 6)
                                .addComponent(rdbAuthor)
                                .addGap(6, 6, 6)
                                .addComponent(rdbIsbn)
                                .addGap(29, 29, 29))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addGap(124, 124, 124)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ckbProgramBooks)
                            .addComponent(ckbUsersBooks)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(502, 502, 502)
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)))
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ckbProgramBooks)
                        .addGap(6, 6, 6)
                        .addComponent(ckbUsersBooks))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdbTitle)
                            .addComponent(rdbPublisher)
                            .addComponent(rdbAuthor)
                            .addComponent(rdbIsbn)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel1))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtSearchBook)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int row = tabBooks.getSelectedRow();
        
        try{
            String title = tabBooks.getValueAt(row, 0).toString();
            String publisher = tabBooks.getValueAt(row, 1).toString();
            String author = tabBooks.getValueAt(row, 2).toString();
            String genre = tabBooks.getValueAt(row, 3).toString();
            int isbn = Integer.parseInt(tabBooks.getValueAt(row, 4).toString());

            for (User u : MainMenu.userList){
                for (Book b : u.getBookLibrary()){
                    if(b.getTitle().equals(title) && b.getPublisher().equals(publisher) && 
                        b.getAuthor().equals(author) && b.getGenre().equals(genre) && isbn == b.getIsbn()){

                        openForm(new FormAboutBook(b));
                    }
                }
            }
            for (Book b : MainMenu.bookLibrary){
                if(b.getTitle().equals(title) && b.getPublisher().equals(publisher) && 
                    b.getAuthor().equals(author) && b.getGenre().equals(genre) && isbn == b.getIsbn()){

                    openForm(new FormAboutBook(b));
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Selecione algum livro!!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void rdbTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbTitleActionPerformed
        // TODO add your handling code here:  
    }//GEN-LAST:event_rdbTitleActionPerformed

    private void rdbPublisherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbPublisherActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbPublisherActionPerformed

    private void rdbAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbAuthorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbAuthorActionPerformed

    private void rdbIsbnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbIsbnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbIsbnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        initTableWithoutRow();
        try{
            if(ckbProgramBooks.isSelected() && ckbUsersBooks.isSelected()){
                if(rdbTitle.isSelected()){
                    for(User u: MainMenu.userList)
                        searchBookByTitle(txtSearchBook.getText(), u.getBookLibrary());
                    searchBookByTitle(txtSearchBook.getText(), MainMenu.bookLibrary);
                }
                else if(rdbAuthor.isSelected()){
                    for(User u: MainMenu.userList)
                        searchBookByAuthor(txtSearchBook.getText(), u.getBookLibrary());
                    searchBookByAuthor(txtSearchBook.getText(), MainMenu.bookLibrary);
                }
                else if(rdbIsbn.isSelected()){
                    for(User u: MainMenu.userList)
                        searchBookByIsbn(Integer.parseInt(txtSearchBook.getText()), u.getBookLibrary());
                    searchBookByIsbn(Integer.parseInt(txtSearchBook.getText()), MainMenu.bookLibrary);
                }  
                else if(rdbPublisher.isSelected()){
                    for(User u: MainMenu.userList)
                        searchBookByPublisher(txtSearchBook.getText(), u.getBookLibrary());
                    searchBookByPublisher(txtSearchBook.getText(), MainMenu.bookLibrary);
                }
            }
            else if(ckbProgramBooks.isSelected() && !ckbUsersBooks.isSelected()){
                if(rdbTitle.isSelected()){
                    searchBookByTitle(txtSearchBook.getText(), MainMenu.bookLibrary);
                }
                else if(rdbAuthor.isSelected()){
                    searchBookByAuthor(txtSearchBook.getText(), MainMenu.bookLibrary);
                }
                else if(rdbIsbn.isSelected()){
                    searchBookByIsbn(Integer.parseInt(txtSearchBook.getText()), MainMenu.bookLibrary);
                }  
                else if(rdbPublisher.isSelected()){
                    searchBookByPublisher(txtSearchBook.getText(), MainMenu.bookLibrary);
                }
            }else if(!ckbProgramBooks.isSelected() && ckbUsersBooks.isSelected()){
                if(rdbTitle.isSelected()){
                    for(User u: MainMenu.userList)
                        searchBookByTitle(txtSearchBook.getText(), u.getBookLibrary());
                }
                else if(rdbAuthor.isSelected()){
                    for(User u: MainMenu.userList)
                        searchBookByAuthor(txtSearchBook.getText(), u.getBookLibrary());
                }
                else if(rdbIsbn.isSelected()){
                    for(User u: MainMenu.userList)
                        searchBookByIsbn(Integer.parseInt(txtSearchBook.getText()), u.getBookLibrary());
                }  
                else if(rdbPublisher.isSelected()){
                    for(User u: MainMenu.userList)
                        searchBookByPublisher(txtSearchBook.getText(), u.getBookLibrary());
                }
            } 
            if(tabBooks.getRowCount() == 0){
                JOptionPane.showMessageDialog(null, "Nenhum livro encontrado", "Resultado", JOptionPane.INFORMATION_MESSAGE);
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Digite algo para pesquisar", "Error", JOptionPane.ERROR_MESSAGE);
        }
           
    }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ckbProgramBooks;
    private javax.swing.JCheckBox ckbUsersBooks;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rdbAuthor;
    private javax.swing.JRadioButton rdbIsbn;
    private javax.swing.JRadioButton rdbPublisher;
    private javax.swing.JRadioButton rdbTitle;
    private javax.swing.JTable tabBooks;
    private javax.swing.JTextField txtSearchBook;
    // End of variables declaration//GEN-END:variables

    private void configureButtonGroup(){
        
        ButtonGroup bg = new ButtonGroup();

        bg.add(rdbTitle);
        bg.add(rdbPublisher);
        bg.add(rdbAuthor);
        bg.add(rdbIsbn);
        rdbTitle.setSelected(true);
    }
    
    private void configureTable(){
        DefaultTableModel m = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        m.addColumn("T√≠tulo");
        m.addColumn("Editora");
        m.addColumn("Autor");
        m.addColumn("G√™nero");
        m.addColumn("Isbn");
        
        m.setNumRows(0);
        tabBooks.setModel(m);
    }
    
    private void fillTable(List<Book> bookLibrary){
        DefaultTableModel m = (DefaultTableModel)
                tabBooks.getModel();
        
        for (Book b : bookLibrary){
            m.addRow(new Object[]
                {
                    b.getTitle(),
                    b.getPublisher(),
                    b.getAuthor(),
                    b.getGenre(),
                    b.getIsbn()
                }
            );
        }
        
        tabBooks.setModel(m);        
    }
    
    private void searchBookByTitle(String searchTitle, List<Book> bookLibrary){
        DefaultTableModel m = (DefaultTableModel)
                tabBooks.getModel();

        for (Book b : bookLibrary){
            if(b.getTitle().equals(searchTitle)){
                m.addRow(new Object[]
                {
                    b.getTitle(),
                    b.getPublisher(),
                    b.getAuthor(),
                    b.getGenre(),
                    b.getIsbn()
                });
            }  
        }   
        
        tabBooks.setModel(m);
    }
    
    private void searchBookByPublisher(String searchPublisher, List<Book> bookLibrary){
        DefaultTableModel m = (DefaultTableModel)
                tabBooks.getModel();
        
        for (Book b : bookLibrary){
            if(b.getPublisher().equals(searchPublisher)){
                m.addRow(new Object[]
                {
                    b.getTitle(),
                    b.getPublisher(),
                    b.getAuthor(),
                    b.getGenre(),
                    b.getIsbn()
                });
            }   
        }
        
        tabBooks.setModel(m);
    }
    
    private void searchBookByAuthor(String searchAuthor, List<Book> bookLibrary){
        DefaultTableModel m = (DefaultTableModel)
                tabBooks.getModel();
        
        for (Book b : bookLibrary){
            if(b.getAuthor().equals(searchAuthor)){
                m.addRow(new Object[]
                {
                    b.getTitle(),
                    b.getPublisher(),
                    b.getAuthor(),
                    b.getGenre(),
                    b.getIsbn()
                });
            }   
        }
        
        tabBooks.setModel(m);
    }
    
    private void searchBookByIsbn(int searchIsbn, List<Book> bookLibrary){
        DefaultTableModel m = (DefaultTableModel)
                tabBooks.getModel();
        
        for (Book b : bookLibrary){
            if(b.getIsbn() == searchIsbn){
                m.addRow(new Object[]
                {
                    b.getTitle(),
                    b.getPublisher(),
                    b.getAuthor(),
                    b.getGenre(),
                    b.getIsbn()
                });
            }   
        }
        
        tabBooks.setModel(m);
    }
    
    private void initTableWithoutRow(){
        DefaultTableModel m = (DefaultTableModel)
                tabBooks.getModel();
        m.setNumRows(0);
        tabBooks.setModel(m);
    }
    
    public void openForm(JInternalFrame f){
       
        Dimension d = getParent().getSize();
        getParent().add(f);
        f.setLocation(
            (d.width- f.getWidth())/2,
            (d.height- f.getHeight())/2
        );
        f.setVisible(true);
        
        this.dispose();
    }
}
